"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

require("core-js/modules/es.object.get-prototype-of.js");

require("core-js/modules/es.object.set-prototype-of.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TrezorSigner = void 0;

var _ethers = require("ethers");

var _trezorConnect = _interopRequireDefault(require("trezor-connect"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * Trezor hardware wallet signer
 */
var TrezorSigner = /*#__PURE__*/function (_ethers$Signer) {
  _inherits(TrezorSigner, _ethers$Signer);

  var _super = _createSuper(TrezorSigner);

  /**
   * Creates a TrezorSigner instance
   * @param {Object} provider - Ethers provider
   * @param {Object} options - Additional data to set up the signer, e.g. hw wallet path
   */
  function TrezorSigner(provider, options) {
    var _this;

    _classCallCheck(this, TrezorSigner);

    _this = _super.call(this);
    _this.provider = provider;
    _this.path = options && options.path ? options.path : _ethers.ethers.utils.defaultPath;
    return _this;
  }
  /**
   * Returns the checksum address
   * @returns {Promise} - Promise of the checksum address
   */


  _createClass(TrezorSigner, [{
    key: "getAddress",
    value: function getAddress() {
      return _trezorConnect.default.ethereumGetAddress({
        path: this.path
      }).then(function (_ref) {
        var address = _ref.address;
        return _ethers.ethers.utils.getAddress(address);
      });
    }
    /**
     * Returns the signed prefixed-message.
     * @param {Uint8[]|string} message - Message to sign in bytes[] or string
     * @returns {Promise} - Promise of the message signature
     */

  }, {
    key: "signMessage",
    value: function signMessage(message) {
      var messageBytes = typeof message === 'string' ? _ethers.ethers.utils.toUtf8Bytes(message) : message;

      var messageHex = _ethers.ethers.utils.hexlify(messageBytes);

      return _trezorConnect.default.ethereumSignMessage({
        path: this.path,
        message: messageHex,
        hex: true
      }).then(function (_ref2) {
        var result = _ref2.result;
        return result.payload.signature;
      });
    }
    /**
     * Signs a transaction
     * @param {Object} transaction - Transaction to be signed
     * @returns {Promise} - Promise of the transaction signature
     */

  }, {
    key: "signTransaction",
    value: function signTransaction(transaction) {
      var _this2 = this;

      return _ethers.ethers.utils.resolveProperties(transaction).then(function (tx) {
        return _trezorConnect.default.ethereumSignTransaction({
          path: _this2.path,
          transaction: tx
        }).then(function (result) {
          var signature = {
            r: result.payload.r,
            s: result.payload.s,
            v: result.payload.v
          };
          return _ethers.ethers.utils.serializeTransaction(tx, signature);
        });
      });
    }
    /**
     * Returns a new instance of the Signer, connected to the provider.
     * @param {Object} provider - Ethers provider
     * @param {Object} options - Additional data to set up the signer, e.g. hw wallet path
     * @returns {Promise} - Promise of a new LedgerSigner instance
     */

  }], [{
    key: "connect",
    value: function connect(provider, options) {
      return new TrezorSigner(provider, options);
    }
  }]);

  return TrezorSigner;
}(_ethers.ethers.Signer);

exports.TrezorSigner = TrezorSigner;