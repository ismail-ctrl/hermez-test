"use strict";

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.promise.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.approve = approve;

require("regenerator-runtime/runtime.js");

var _ERC20ABI = _interopRequireDefault(require("./abis/ERC20ABI.js"));

var _constants = require("./constants.js");

var _contracts = require("./contracts.js");

var _signers = require("./signers.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/**
 * Sends an approve transaction to an ERC 20 contract for a certain amount of tokens
 * @param {BigInt} amount - Amount of tokens to be approved by the ERC 20 contract
 * @param {String} accountAddress - The Ethereum address of the transaction sender
 * @param {String} contractAddress - The token smart contract address
 * @param {Object} signerData - Signer data used to build a Signer to send the transaction
 * @param {String} providerUrl - Network url (i.e, http://localhost:8545). Optional
 * @returns {Promise} transaction
 */
function approve(_x, _x2, _x3, _x4, _x5) {
  return _approve.apply(this, arguments);
}

function _approve() {
  _approve = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(amount, accountAddress, contractAddress, signerData, providerUrl) {
    var txSignerData, erc20Contract, allowance, tx;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            txSignerData = signerData || {
              type: _signers.SignerType.JSON_RPC,
              addressOrIndex: accountAddress
            };
            erc20Contract = (0, _contracts.getContract)(contractAddress, _ERC20ABI.default, txSignerData, providerUrl);
            _context.next = 4;
            return erc20Contract.allowance(accountAddress, _constants.contractAddresses.Hermez);

          case 4:
            allowance = _context.sent;

            if (!allowance.lt(amount)) {
              _context.next = 7;
              break;
            }

            return _context.abrupt("return", erc20Contract.approve(_constants.contractAddresses.Hermez, amount));

          case 7:
            if (allowance.isZero()) {
              _context.next = 13;
              break;
            }

            _context.next = 10;
            return erc20Contract.approve(_constants.contractAddresses.Hermez, '0');

          case 10:
            tx = _context.sent;
            _context.next = 13;
            return tx.wait(1);

          case 13:
            return _context.abrupt("return", erc20Contract.approve(_constants.contractAddresses.Hermez, amount));

          case 14:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _approve.apply(this, arguments);
}