"use strict";

require("core-js/modules/es.string.sub.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fix2Float = fix2Float;
exports.float2Fix = float2Fix;
exports.floorFix2Float = floorFix2Float;

var _ffjavascript = require("ffjavascript");

/**
 * Convert a float to a fix
 * @param {Scalar} fl - Scalar encoded in float
 * @returns {Scalar} Scalar encoded in fix
 */
function float2Fix(fl) {
  var m = fl & 0x3FF;
  var e = fl >> 11;
  var e5 = fl >> 10 & 1;

  var exp = _ffjavascript.Scalar.e(1);

  for (var i = 0; i < e; i++) {
    exp *= _ffjavascript.Scalar.e(10);
  }

  var res = _ffjavascript.Scalar.mul(m, exp);

  if (e5 && e) {
    res = _ffjavascript.Scalar.add(res, _ffjavascript.Scalar.div(exp, 2));
  }

  return res;
}
/**
 * Convert a fix to a float, always rounding down
 * @param {String} _f - Scalar encoded in fix
 * @returns {Scalar} Scalar encoded in float
 * @private
*/


function _floorFix2Float(_f) {
  var f = _ffjavascript.Scalar.e(_f);

  if (_ffjavascript.Scalar.isZero(f)) return 0;
  var m = f;
  var e = 0;

  while (!_ffjavascript.Scalar.isZero(_ffjavascript.Scalar.shr(m, 10))) {
    m = _ffjavascript.Scalar.div(m, 10);
    e++;
  }

  var res = _ffjavascript.Scalar.toNumber(m) + (e << 11);
  return res;
}
/**
 * Convert a fix to a float
 * @param {String} _f - Scalar encoded in fix
 * @returns {Scalar} Scalar encoded in float
*/


function fix2Float(_f) {
  var f = _ffjavascript.Scalar.e(_f);

  function dist(n1, n2) {
    var tmp = _ffjavascript.Scalar.sub(n1, n2);

    return _ffjavascript.Scalar.abs(tmp);
  }

  var fl1 = _floorFix2Float(f);

  var fi1 = float2Fix(fl1);
  var fl2 = fl1 | 0x400;
  var fi2 = float2Fix(fl2);
  var m3 = (fl1 & 0x3FF) + 1;
  var e3 = fl1 >> 11;

  if (m3 === 0x400) {
    m3 = 0x66; // 0x400 / 10

    e3++;
  }

  var fl3 = m3 + (e3 << 11);
  var fi3 = float2Fix(fl3);
  var res = fl1;
  var d = dist(fi1, f);
  var d2 = dist(fi2, f);

  if (_ffjavascript.Scalar.gt(d, d2)) {
    res = fl2;
    d = d2;
  }

  var d3 = dist(fi3, f);

  if (_ffjavascript.Scalar.gt(d, d3)) {
    res = fl3;
  }

  return res;
}
/**
 * Convert a float to a fix, always rounding down
 * @param {Scalar} fl - Scalar encoded in float
 * @returns {Scalar} Scalar encoded in fix
*/


function floorFix2Float(_f) {
  var f = _ffjavascript.Scalar.e(_f);

  var fl1 = _floorFix2Float(f);

  var fl2 = fl1 | 0x400;
  var fi2 = float2Fix(fl2);

  if (_ffjavascript.Scalar.leq(fi2, f)) {
    return fl2;
  } else {
    return fl1;
  }
}