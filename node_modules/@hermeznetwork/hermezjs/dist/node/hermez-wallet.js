"use strict";

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.regexp.to-string.js");

require("core-js/modules/es.string.starts-with.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createWalletFromEtherAccount = createWalletFromEtherAccount;
exports.HermezWallet = void 0;

require("regenerator-runtime/runtime.js");

var _circomlib = _interopRequireDefault(require("circomlib"));

var _jsSha = _interopRequireDefault(require("js-sha3"));

var _ffjavascript = require("ffjavascript");

var _ethers = require("ethers");

var _txUtils = require("./tx-utils.js");

var _utils = require("./utils.js");

var _providers = require("./providers.js");

var _addresses = require("./addresses.js");

var _constants = require("./constants.js");

var _signers = require("./signers.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * @class
 * Manage Babyjubjub keys
 * Perform standard wallet actions like signing
 */
var HermezWallet = /*#__PURE__*/function () {
  /**
   * Initialize Babyjubjub wallet from private key
   * @param {Buffer} privateKey - 32 bytes buffer
   * @param {String} hermezEthereumAddress - Hexadecimal string containing the public Ethereum key from Metamask
   */
  function HermezWallet(privateKey, hermezEthereumAddress) {
    _classCallCheck(this, HermezWallet);

    if (privateKey.length !== 32) {
      throw new Error('Private key buffer must be 32 bytes');
    }

    if (!(0, _addresses.isHermezEthereumAddress)(hermezEthereumAddress)) {
      throw new Error('Invalid Hermez Ethereum address');
    }

    var publicKey = _circomlib.default.eddsa.prv2pub(privateKey);

    this.privateKey = privateKey;
    this.publicKey = [publicKey[0].toString(), publicKey[1].toString()];
    this.publicKeyHex = [publicKey[0].toString(16), publicKey[1].toString(16)];

    var compressedPublicKey = _ffjavascript.utils.leBuff2int(_circomlib.default.babyJub.packPoint(publicKey));

    this.publicKeyCompressed = compressedPublicKey.toString();
    this.publicKeyCompressedHex = _ethers.ethers.utils.hexZeroPad("0x".concat(compressedPublicKey.toString(16)), 32).slice(2);
    this.publicKeyBase64 = (0, _addresses.hexToBase64BJJ)(this.publicKeyCompressedHex);
    this.hermezEthereumAddress = hermezEthereumAddress;
  }
  /**
   * To sign transaction with babyjubjub keys
   * @param {Object} transaction - Transaction object
   * @param {Object} encodedTransaction - Transaction encoded object
   * @returns {Object} The signed transaction object
   */


  _createClass(HermezWallet, [{
    key: "signTransaction",
    value: function signTransaction(transaction, encodedTransaction) {
      var hashMessage = (0, _txUtils.buildTransactionHashMessage)(encodedTransaction);

      var signature = _circomlib.default.eddsa.signPoseidon(this.privateKey, hashMessage);

      var packedSignature = _circomlib.default.eddsa.packSignature(signature);

      transaction.signature = packedSignature.toString('hex');
      return transaction;
    }
    /**
     * Generates the signature necessary for /create-account-authorization endpoint
     * @param {String} providerUrl - Network url (i.e, http://localhost:8545). Optional
     * @param {Object} signerData - Signer data used to build a Signer to create the walet
     * @returns {String} The generated signature
     */

  }, {
    key: "signCreateAccountAuthorization",
    value: function () {
      var _signCreateAccountAuthorization = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(providerUrl, signerData) {
        var provider, signer, accountCreationAuthMsgArray, chainId, chainIdHex, messageHex, messageArray, signature, signatureParams;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                provider = (0, _providers.getProvider)(providerUrl);
                signer = (0, _signers.getSigner)(provider, signerData);
                accountCreationAuthMsgArray = _ethers.ethers.utils.toUtf8Bytes(_constants.CREATE_ACCOUNT_AUTH_MESSAGE);
                _context.next = 5;
                return provider.getNetwork();

              case 5:
                chainId = _context.sent.chainId.toString(16);
                chainIdHex = chainId.startsWith('0x') ? chainId : "0x".concat(chainId);
                messageHex = _ethers.ethers.utils.hexlify(accountCreationAuthMsgArray) + this.publicKeyCompressedHex + _ethers.ethers.utils.hexZeroPad(chainIdHex, 2).slice(2) + _constants.contractAddresses.Hermez.slice(2);
                messageArray = _ethers.ethers.utils.arrayify(messageHex);
                _context.next = 11;
                return signer.signMessage(messageArray);

              case 11:
                signature = _context.sent;
                // Generate the signature from params as there's a bug in ethers
                // that generates the base signature wrong
                signatureParams = _ethers.ethers.utils.splitSignature(signature);
                return _context.abrupt("return", signature.slice(0, -2) + signatureParams.v.toString(16));

              case 14:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function signCreateAccountAuthorization(_x, _x2) {
        return _signCreateAccountAuthorization.apply(this, arguments);
      }

      return signCreateAccountAuthorization;
    }()
  }]);

  return HermezWallet;
}();
/**
 * Creates a HermezWallet from one of the Ethereum wallets in the provider
 * @param {String} providerUrl - Network url (i.e, http://localhost:8545). Optional
 * @param {Object} signerData - Signer data used to build a Signer to create the walet
 * @returns {Object} Contains the `hermezWallet` as a HermezWallet instance and the `hermezEthereumAddress`
 */


exports.HermezWallet = HermezWallet;

function createWalletFromEtherAccount(_x3, _x4) {
  return _createWalletFromEtherAccount.apply(this, arguments);
}

function _createWalletFromEtherAccount() {
  _createWalletFromEtherAccount = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(providerUrl, signerData) {
    var provider, signer, ethereumAddress, hermezEthereumAddress, signature, hashedSignature, bufferSignature, hermezWallet;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            provider = (0, _providers.getProvider)(providerUrl);
            signer = (0, _signers.getSigner)(provider, signerData);
            _context2.next = 4;
            return signer.getAddress(signerData && signerData.addressOrIndex);

          case 4:
            ethereumAddress = _context2.sent;
            hermezEthereumAddress = (0, _addresses.getHermezAddress)(ethereumAddress);
            _context2.next = 8;
            return signer.signMessage(_constants.METAMASK_MESSAGE);

          case 8:
            signature = _context2.sent;
            hashedSignature = _jsSha.default.keccak256(signature);
            bufferSignature = (0, _utils.hexToBuffer)(hashedSignature);
            hermezWallet = new HermezWallet(bufferSignature, hermezEthereumAddress);
            return _context2.abrupt("return", {
              hermezWallet: hermezWallet,
              hermezEthereumAddress: hermezEthereumAddress
            });

          case 13:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _createWalletFromEtherAccount.apply(this, arguments);
}