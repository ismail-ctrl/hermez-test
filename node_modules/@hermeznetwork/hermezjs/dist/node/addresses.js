"use strict";

require("core-js/modules/es.array.concat.js");

require("core-js/modules/es.array.includes.js");

require("core-js/modules/es.array.last-index-of.js");

require("core-js/modules/es.number.constructor.js");

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.regexp.constructor.js");

require("core-js/modules/es.regexp.exec.js");

require("core-js/modules/es.regexp.to-string.js");

require("core-js/modules/es.string.includes.js");

require("core-js/modules/es.string.replace.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getHermezAddress = getHermezAddress;
exports.getEthereumAddress = getEthereumAddress;
exports.isHermezEthereumAddress = isHermezEthereumAddress;
exports.isHermezBjjAddress = isHermezBjjAddress;
exports.getAccountIndex = getAccountIndex;
exports.hexToBase64BJJ = hexToBase64BJJ;

var _ffjavascript = require("ffjavascript");

var _base64url = _interopRequireDefault(require("base64url"));

var _utils = require("./utils.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var hermezPrefix = 'hez:';
var hezEthereumAddressPattern = new RegExp('^hez:0x[a-fA-F0-9]{40}$');
var bjjAddressPattern = new RegExp('^hez:[A-Za-z0-9_-]{44}$');
/**
 * Get the hermez address representation of an ethereum address
 * @param {String} ethereumAddress
 * @returns {String} hezEthereumAddress
 */

function getHermezAddress(ethereumAddress) {
  return "".concat(hermezPrefix).concat(ethereumAddress);
}
/**
 * Gets the Ethereum address part of a Hermez address
 * @param {String} hezEthereumAddress
 * @returns {String} ethereumAddress
 */


function getEthereumAddress(hezEthereumAddress) {
  if (hezEthereumAddress.includes('hez:')) {
    return hezEthereumAddress.replace('hez:', '');
  } else {
    return hezEthereumAddress;
  }
}
/**
 * Checks if given string matches regex of a Hermez address
 * @param {String} test
 * @returns {Boolean}
 */


function isHermezEthereumAddress(test) {
  if (hezEthereumAddressPattern.test(test)) {
    return true;
  }

  return false;
}
/**
 * Checks if given string matches regex of a Hermez BJJ address
 * @param {String} test
 * @returns {Boolean}
 */


function isHermezBjjAddress(test) {
  if (bjjAddressPattern.test(test)) {
    return true;
  }

  return false;
}
/**
 * Extracts the account index from the address with the hez prefix
 * @param {String} hezAccountIndex - Account index with hez prefix e.g. hez:DAI:4444
 * @returns {String} accountIndex - e.g. 4444
 */


function getAccountIndex(hezAccountIndex) {
  var colonIndex = hezAccountIndex.lastIndexOf(':') + 1;
  return Number(hezAccountIndex.substring(colonIndex));
}
/**
 * Get API Bjj compressed data format
 * @param {String} bjjCompressedHex Bjj compressed address encoded as hex string
 * @returns {String} API adapted bjj compressed address
 */


function hexToBase64BJJ(bjjCompressedHex) {
  // swap endian
  var bjjScalar = _ffjavascript.Scalar.fromString(bjjCompressedHex, 16);

  var bjjBuff = _ffjavascript.utils.leInt2Buff(bjjScalar, 32);

  var bjjSwap = (0, _utils.padZeros)(_ffjavascript.utils.beBuff2int(bjjBuff).toString(16), 64);
  var bjjSwapBuffer = Buffer.from(bjjSwap, 'hex');
  var sum = 0;

  for (var i = 0; i < bjjSwapBuffer.length; i++) {
    sum += bjjSwapBuffer[i];
    sum = sum % Math.pow(2, 8);
  }

  var sumBuff = Buffer.alloc(1);
  sumBuff.writeUInt8(sum);
  var finalBuffBjj = Buffer.concat([bjjSwapBuffer, sumBuff]);
  return "hez:".concat(_base64url.default.encode(finalBuffBjj));
}