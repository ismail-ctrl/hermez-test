"use strict";

require("core-js/modules/es.array.concat.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.map.js");

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.promise.js");

require("core-js/modules/es.string.iterator.js");

require("core-js/modules/web.dom-collections.iterator.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initializeTransactionPool = initializeTransactionPool;
exports.getPoolTransactions = getPoolTransactions;
exports.addPoolTransaction = addPoolTransaction;
exports.removePoolTransaction = removePoolTransaction;
exports._storage = void 0;

var _nodeLocalstorage = _interopRequireDefault(require("node-localstorage"));

var _constants = require("./constants.js");

var _api = require("./api.js");

var _http = require("./http.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var LocalStorage = _nodeLocalstorage.default.LocalStorage;
var storage = typeof localStorage === 'undefined' || localStorage === null ? new LocalStorage('./auxdata') : localStorage;
/**
 * If there's no instance in LocalStorage for the Transaction Pool, create it
 * This needs to be run when the Hermez client loads
 */

function initializeTransactionPool() {
  if (!storage.getItem(_constants.TRANSACTION_POOL_KEY)) {
    var emptyTransactionPool = {};
    storage.setItem(_constants.TRANSACTION_POOL_KEY, JSON.stringify(emptyTransactionPool));
  }
}
/**
 * Fetches the transaction details for each transaction in the pool for the specified account index and bjj
 * @param {String} accountIndex - The account index
 * @param {String} bjj - The account's BabyJubJub
 * @returns {Array}
 */


function getPoolTransactions(accountIndex, bJJ) {
  var transactionPool = JSON.parse(storage.getItem(_constants.TRANSACTION_POOL_KEY));
  var accountTransactionPool = transactionPool[bJJ];

  if (typeof accountTransactionPool === 'undefined') {
    return Promise.resolve([]);
  }

  var accountTransactionsPromises = accountTransactionPool.filter(function (transaction) {
    return transaction.fromAccountIndex === accountIndex;
  }).map(function (_ref) {
    var transactionId = _ref.id;
    return (0, _api.getPoolTransaction)(transactionId).catch(function (err) {
      if (err.response.status === _http.HttpStatusCode.NOT_FOUND) {
        removePoolTransaction(bJJ, transactionId);
      }
    });
  });
  return Promise.all(accountTransactionsPromises).then(function (transactions) {
    var successfulTransactions = transactions.filter(function (transaction) {
      return typeof transaction !== 'undefined';
    });
    return successfulTransactions;
  });
}
/**
 * Adds a transaction to the transaction pool
 * @param {String} transaction - The transaction to add to the pool
 * @param {String} bJJ - The account with which the transaction was made
 */


function addPoolTransaction(transaction, bJJ) {
  var transactionPool = JSON.parse(storage.getItem(_constants.TRANSACTION_POOL_KEY));
  var accountTransactionPool = transactionPool[bJJ];
  var newAccountTransactionPool = accountTransactionPool === undefined ? [transaction] : [].concat(_toConsumableArray(accountTransactionPool), [transaction]);

  var newTransactionPool = _objectSpread(_objectSpread({}, transactionPool), {}, _defineProperty({}, bJJ, newAccountTransactionPool));

  storage.setItem(_constants.TRANSACTION_POOL_KEY, JSON.stringify(newTransactionPool));
}
/**
 * Removes a transaction from the transaction pool
 * @param {String} bJJ - The account with which the transaction was originally made
 * @param {String} transactionId - The transaction identifier to remove from the pool
 */


function removePoolTransaction(bJJ, transactionId) {
  var transactionPool = JSON.parse(storage.getItem(_constants.TRANSACTION_POOL_KEY));
  var accountTransactionPool = transactionPool[bJJ];
  var newAccountTransactionPool = accountTransactionPool.filter(function (transaction) {
    return transaction.id !== transactionId;
  });

  var newTransactionPool = _objectSpread(_objectSpread({}, transactionPool), {}, _defineProperty({}, bJJ, newAccountTransactionPool));

  storage.setItem(_constants.TRANSACTION_POOL_KEY, JSON.stringify(newTransactionPool));
}

var _storage = storage;
exports._storage = _storage;